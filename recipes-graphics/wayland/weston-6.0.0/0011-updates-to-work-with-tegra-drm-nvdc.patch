From f4872f56800a86a07bd4191c32730c51b88c18c2 Mon Sep 17 00:00:00 2001
From: Matt Madison <matt@madison.systems>
Date: Sun, 9 Sep 2018 08:30:19 -0700
Subject: [PATCH 11/11] updates to work with tegra drm-nvdc

- drm-nvdc doesn't properly flag enums
- use drmOpen should udev search fail
- double-free SIGABRT in an NVIDIA library if you
  call drmModeRmFB, so avoid that
- drm-nvdc atomic API incorrect return values and
  avoid setting some properties that are not writable
  (although atomic mode setting not actually used here)
- don't re-modeset on every paint, since drm-nvdc
  reapplies the modeset even if it's the same, leading
  to severe flicker
- work around hang in gl renderer on DPMS OFF->ON transitions
  by closing EGL on DPMS OFF and re-initializion on DPMS ON
- always leave backend->state_invalid as true to avoid
  vblank waits

Signed-off-by: Matt Madison <matt@madison.systems>
---
 libweston/compositor-drm.c | 179 +++++++++++++++++++++++++++----------
 shared/weston-egl-ext.h    |   5 --
 2 files changed, 134 insertions(+), 50 deletions(-)

diff --git a/libweston/compositor-drm.c b/libweston/compositor-drm.c
index 17f2e103..9992ff1a 100644
--- a/libweston/compositor-drm.c
+++ b/libweston/compositor-drm.c
@@ -344,6 +344,7 @@ struct drm_backend {
 	bool use_pixman_shadow;
 
 	int use_egldevice;
+	bool is_nvdc;
 
 	struct udev_input input;
 
@@ -399,6 +400,7 @@ struct drm_fb {
 
 	/* Used by dumb fbs */
 	void *map;
+	bool nounmap;
 };
 
 struct drm_edid {
@@ -792,10 +794,18 @@ drm_property_info_populate(struct drm_backend *b,
 		}
 	}
 
+#ifdef DEBUG
+	weston_log("%s: examining %u properties\n", __func__, props->count_props);
+#endif
+
 	for (i = 0; i < props->count_props; i++) {
 		unsigned int k;
 
 		prop = drmModeGetProperty(b->drm.fd, props->props[i]);
+#ifdef DEBUG
+		weston_log("  drmModeGetProperty returned %p for property 0x%x\n",
+			   prop, props->props[i]);
+#endif
 		if (!prop)
 			continue;
 
@@ -823,13 +833,20 @@ drm_property_info_populate(struct drm_backend *b,
 		}
 
 		info[j].prop_id = props->props[i];
-
+#ifdef DEBUG
+		weston_log("    Property: 0x%x (%s): count_values=%d, count_enums=%d, flags=0x%x\n",
+			   prop->prop_id, prop->name, prop->count_values, prop->count_enums, prop->flags);
+#endif
 		if (info[j].num_enum_values == 0) {
+#ifdef DEBUG
+			weston_log("      -- don't want enums for this prop, skipping\n");
+#endif
 			drmModeFreeProperty(prop);
 			continue;
 		}
 
-		if (!(prop->flags & DRM_MODE_PROP_ENUM)) {
+		if (!((prop->flags & DRM_MODE_PROP_ENUM) ||
+		      (b->is_nvdc && prop->count_enums > 0))) {
 			weston_log("DRM: expected property %s to be an enum,"
 				   " but it is not; ignoring\n", prop->name);
 			drmModeFreeProperty(prop);
@@ -846,11 +863,20 @@ drm_property_info_populate(struct drm_backend *b,
 					break;
 			}
 
-			if (l == prop->count_enums)
+			if (l == prop->count_enums) {
+#ifdef DEBUG
+				weston_log("    -- no matching enum for %s\n",
+					   info[j].enum_values[k].name);
+#endif
 				continue;
+			}
 
 			info[j].enum_values[k].valid = true;
 			info[j].enum_values[k].value = prop->enums[l].value;
+#ifdef DEBUG
+			weston_log("    -- enum index %d (%s) value is: %llu\n",
+				   k, prop->enums[l].name, prop->enums[l].value);
+#endif
 		}
 
 		drmModeFreeProperty(prop);
@@ -955,7 +981,7 @@ drm_head_find_by_connector(struct drm_backend *backend, uint32_t connector_id)
 static void
 drm_fb_destroy(struct drm_fb *fb)
 {
-	if (fb->fb_id != 0)
+	if (fb->fb_id != 0 && !fb->nounmap)
 		drmModeRmFB(fb->fd, fb->fb_id);
 	weston_buffer_reference(&fb->buffer_ref, NULL);
 	weston_buffer_release_reference(&fb->buffer_release_ref, NULL);
@@ -969,7 +995,7 @@ drm_fb_destroy_dumb(struct drm_fb *fb)
 
 	assert(fb->type == BUFFER_PIXMAN_DUMB);
 
-	if (fb->map && fb->size > 0)
+	if (fb->map && fb->size > 0 && !fb->nounmap)
 		munmap(fb->map, fb->size);
 
 	memset(&destroy_arg, 0, sizeof(destroy_arg));
@@ -1095,10 +1121,16 @@ drm_fb_create_dumb(struct drm_backend *b, int width, int height,
 	if (ret)
 		goto err_add_fb;
 
-	fb->map = mmap(NULL, fb->size, PROT_WRITE,
-		       MAP_SHARED, b->drm.fd, map_arg.offset);
-	if (fb->map == MAP_FAILED)
-		goto err_add_fb;
+	if (b->is_nvdc) {
+		fb->map = (void *) map_arg.offset;
+		fb->nounmap = true;
+	} else {
+		fb->map = mmap(NULL, fb->size, PROT_WRITE,
+			       MAP_SHARED, b->drm.fd, map_arg.offset);
+		if (fb->map == MAP_FAILED)
+			goto err_add_fb;
+		fb->nounmap = false;
+	}
 
 	return fb;
 
@@ -2259,6 +2291,11 @@ drm_waitvblank_pipe(struct drm_output *output)
 		return 0;
 }
 
+static int
+drm_output_init_egl(struct drm_output *output, struct drm_backend *b);
+static void
+drm_output_fini_egl(struct drm_output *output);
+
 static int
 drm_output_apply_state_legacy(struct drm_output_state *state)
 {
@@ -2315,6 +2352,8 @@ drm_output_apply_state_legacy(struct drm_output_state *state)
 				weston_log("drmModeSetCursor failed disable: %m\n");
 		}
 
+		if (backend->is_nvdc)
+			drm_output_fini_egl(output);
 		ret = drmModeSetCrtc(backend->drm.fd, output->crtc_id, 0, 0, 0,
 				     NULL, 0, NULL);
 		if (ret)
@@ -2348,10 +2387,10 @@ drm_output_apply_state_legacy(struct drm_output_state *state)
 	assert(scanout_state->in_fence_fd == -1);
 
 	mode = to_drm_mode(output->base.current_mode);
-	if (backend->state_invalid ||
-	    !scanout_plane->state_cur->fb ||
-	    scanout_plane->state_cur->fb->strides[0] !=
-	    scanout_state->fb->strides[0]) {
+	if (!backend->is_nvdc && (backend->state_invalid ||
+				  !scanout_plane->state_cur->fb ||
+				  scanout_plane->state_cur->fb->strides[0] !=
+				  scanout_state->fb->strides[0])) {
 
 		ret = drmModeSetCrtc(backend->drm.fd, output->crtc_id,
 				     scanout_state->fb->fb_id,
@@ -2471,6 +2510,7 @@ static int
 crtc_add_prop(drmModeAtomicReq *req, struct drm_output *output,
 	      enum wdrm_crtc_property prop, uint64_t val)
 {
+	struct drm_backend *b = to_drm_backend(output->base.compositor);
 	struct drm_property_info *info = &output->props_crtc[prop];
 	int ret;
 
@@ -2483,13 +2523,17 @@ crtc_add_prop(drmModeAtomicReq *req, struct drm_output *output,
 		  (unsigned long) output->crtc_id,
 		  (unsigned long) info->prop_id, info->name,
 		  (unsigned long long) val, (unsigned long long) val);
-	return (ret <= 0) ? -1 : 0;
+	if (b->is_nvdc)
+		return (ret < 0) ? -1 : 0;
+	else
+		return (ret <= 0) ? -1 : 0;
 }
 
 static int
 connector_add_prop(drmModeAtomicReq *req, struct drm_head *head,
 		   enum wdrm_connector_property prop, uint64_t val)
 {
+	struct drm_backend *b = head->backend;
 	struct drm_property_info *info = &head->props_conn[prop];
 	int ret;
 
@@ -2502,13 +2546,17 @@ connector_add_prop(drmModeAtomicReq *req, struct drm_head *head,
 		  (unsigned long) head->connector_id,
 		  (unsigned long) info->prop_id, info->name,
 		  (unsigned long long) val, (unsigned long long) val);
-	return (ret <= 0) ? -1 : 0;
+	if (b->is_nvdc)
+		return (ret < 0) ? -1 : 0;
+	else
+		return (ret <= 0) ? -1 : 0;
 }
 
 static int
 plane_add_prop(drmModeAtomicReq *req, struct drm_plane *plane,
 	       enum wdrm_plane_property prop, uint64_t val)
 {
+	struct drm_backend *b = plane->backend;
 	struct drm_property_info *info = &plane->props[prop];
 	int ret;
 
@@ -2521,7 +2569,10 @@ plane_add_prop(drmModeAtomicReq *req, struct drm_plane *plane,
 		  (unsigned long) plane->plane_id,
 		  (unsigned long) info->prop_id, info->name,
 		  (unsigned long long) val, (unsigned long long) val);
-	return (ret <= 0) ? -1 : 0;
+	if (b->is_nvdc)
+		return (ret < 0) ? -1 : 0;
+	else
+		return (ret <= 0) ? -1 : 0;
 }
 
 static int
@@ -2577,9 +2628,10 @@ drm_output_apply_state_atomic(struct drm_output_state *state,
 
 		/* No need for the DPMS property, since it is implicit in
 		 * routing and CRTC activity. */
-		wl_list_for_each(head, &output->base.head_list, base.output_link) {
-			ret |= connector_add_prop(req, head, WDRM_CONNECTOR_CRTC_ID,
-						  output->crtc_id);
+		if (!b->is_nvdc)
+			wl_list_for_each(head, &output->base.head_list, base.output_link) {
+				ret |= connector_add_prop(req, head, WDRM_CONNECTOR_CRTC_ID,
+							  output->crtc_id);
 		}
 	} else {
 		ret |= crtc_add_prop(req, output, WDRM_CRTC_MODE_ID, 0);
@@ -2587,8 +2639,9 @@ drm_output_apply_state_atomic(struct drm_output_state *state,
 
 		/* No need for the DPMS property, since it is implicit in
 		 * routing and CRTC activity. */
-		wl_list_for_each(head, &output->base.head_list, base.output_link)
-			ret |= connector_add_prop(req, head, WDRM_CONNECTOR_CRTC_ID, 0);
+		if (!b->is_nvdc)
+			wl_list_for_each(head, &output->base.head_list, base.output_link)
+				ret |= connector_add_prop(req, head, WDRM_CONNECTOR_CRTC_ID, 0);
 	}
 
 	if (ret != 0) {
@@ -2602,8 +2655,9 @@ drm_output_apply_state_atomic(struct drm_output_state *state,
 
 		ret |= plane_add_prop(req, plane, WDRM_PLANE_FB_ID,
 				      plane_state->fb ? plane_state->fb->fb_id : 0);
-		ret |= plane_add_prop(req, plane, WDRM_PLANE_CRTC_ID,
-				      plane_state->fb ? output->crtc_id : 0);
+		if (!b->is_nvdc)
+			ret |= plane_add_prop(req, plane, WDRM_PLANE_CRTC_ID,
+					      plane_state->fb ? output->crtc_id : 0);
 		ret |= plane_add_prop(req, plane, WDRM_PLANE_SRC_X,
 				      plane_state->src_x);
 		ret |= plane_add_prop(req, plane, WDRM_PLANE_SRC_Y,
@@ -2706,6 +2760,7 @@ drm_pending_state_apply_atomic(struct drm_pending_state *pending_state,
 				  info->name);
 			if (err <= 0)
 				ret = -1;
+			flags |= DRM_MODE_ATOMIC_ALLOW_MODESET;
 		}
 
 		wl_array_for_each(unused, &b->unused_crtcs) {
@@ -2761,18 +2816,22 @@ drm_pending_state_apply_atomic(struct drm_pending_state *pending_state,
 				ret = -1;
 
 			drm_property_info_free(infos, WDRM_CRTC__COUNT);
+			flags |= DRM_MODE_ATOMIC_ALLOW_MODESET;
 		}
 
 		/* Disable all the planes; planes which are being used will
 		 * override this state in the output-state application. */
-		wl_list_for_each(plane, &b->plane_list, link) {
-			drm_debug(b, "\t\t[atomic] starting with plane %lu disabled\n",
-				  (unsigned long) plane->plane_id);
-			plane_add_prop(req, plane, WDRM_PLANE_CRTC_ID, 0);
-			plane_add_prop(req, plane, WDRM_PLANE_FB_ID, 0);
-		}
+		if (!b->is_nvdc || mode == DRM_STATE_APPLY_SYNC) {
+			wl_list_for_each(plane, &b->plane_list, link) {
+				drm_debug(b, "\t\t[atomic] starting with plane %lu disabled\n",
+					  (unsigned long) plane->plane_id);
+				if (!b->is_nvdc)
+					plane_add_prop(req, plane, WDRM_PLANE_CRTC_ID, 0);
+				plane_add_prop(req, plane, WDRM_PLANE_FB_ID, 0);
+			}
 
-		flags |= DRM_MODE_ATOMIC_ALLOW_MODESET;
+			flags |= DRM_MODE_ATOMIC_ALLOW_MODESET;
+		}
 	}
 
 	wl_list_for_each(output_state, &pending_state->output_list, link) {
@@ -2788,8 +2847,12 @@ drm_pending_state_apply_atomic(struct drm_pending_state *pending_state,
 		goto out;
 	}
 
-	ret = drmModeAtomicCommit(b->drm.fd, req, flags, b);
-	drm_debug(b, "[atomic] drmModeAtomicCommit\n");
+	if (b->is_nvdc && (flags & DRM_MODE_ATOMIC_ALLOW_MODESET) == 0)
+		ret = 0;
+	else {
+		ret = drmModeAtomicCommit(b->drm.fd, req, flags, b);
+		drm_debug(b, "[atomic] drmModeAtomicCommit\n");
+	}
 
 	/* Test commits do not take ownership of the state; return
 	 * without freeing here. */
@@ -2807,7 +2870,7 @@ drm_pending_state_apply_atomic(struct drm_pending_state *pending_state,
 			      link)
 		drm_output_assign_state(output_state, mode);
 
-	b->state_invalid = false;
+	b->state_invalid = b->is_nvdc;
 
 	assert(wl_list_empty(&pending_state->output_list));
 
@@ -2901,7 +2964,7 @@ drm_pending_state_apply(struct drm_pending_state *pending_state)
 		}
 	}
 
-	b->state_invalid = false;
+	b->state_invalid = b->is_nvdc;
 
 	assert(wl_list_empty(&pending_state->output_list));
 
@@ -2953,7 +3016,7 @@ drm_pending_state_apply_sync(struct drm_pending_state *pending_state)
 		}
 	}
 
-	b->state_invalid = false;
+	b->state_invalid = b->is_nvdc;
 
 	assert(wl_list_empty(&pending_state->output_list));
 
@@ -2969,8 +3032,10 @@ drm_output_repaint(struct weston_output *output_base,
 {
 	struct drm_pending_state *pending_state = repaint_data;
 	struct drm_output *output = to_drm_output(output_base);
+	struct drm_backend *b = to_drm_backend(output_base->compositor);
 	struct drm_output_state *state = NULL;
 	struct drm_plane_state *scanout_state;
+	bool was_off;
 
 	assert(!output->virtual);
 
@@ -2987,7 +3052,15 @@ drm_output_repaint(struct weston_output *output_base,
 		state = drm_output_state_duplicate(output->state_cur,
 						   pending_state,
 						   DRM_OUTPUT_STATE_CLEAR_PLANES);
+
+	was_off = state->dpms == WESTON_DPMS_OFF;
 	state->dpms = WESTON_DPMS_ON;
+	if (was_off && b->is_nvdc && !output->dumb[0]) {
+		if (drm_output_init_egl(output, b) < 0) {
+			weston_log("%s: could not re-initialize EGL\n", __func__);
+			goto err;
+		}
+	}
 
 	drm_output_render(state, damage);
 	scanout_state = drm_output_state_get_plane(state,
@@ -4067,10 +4140,6 @@ choose_mode (struct drm_output *output, struct weston_mode *target_mode)
 	return tmp_mode;
 }
 
-static int
-drm_output_init_egl(struct drm_output *output, struct drm_backend *b);
-static void
-drm_output_fini_egl(struct drm_output *output);
 static int
 drm_output_init_pixman(struct drm_output *output, struct drm_backend *b);
 static void
@@ -4158,6 +4227,8 @@ init_kms_caps(struct drm_backend *b)
 
 	weston_log("using %s\n", b->drm.filename);
 
+	b->is_nvdc = strcmp(b->drm.filename, "drm-nvdc") == 0;
+
 	ret = drmGetCap(b->drm.fd, DRM_CAP_TIMESTAMP_MONOTONIC, &cap);
 	if (ret == 0 && cap == 1)
 		clk_id = CLOCK_MONOTONIC;
@@ -4308,7 +4379,9 @@ drm_backend_create_gl_renderer(struct drm_backend *b)
 {
 	if (b->use_egldevice) {
 		EGLint device_platform_attribs[] = {
+#ifdef EGL_DRM_MASTER_FD_EXT
 			EGL_DRM_MASTER_FD_EXT, b->drm.fd,
+#endif
 			EGL_NONE
 		};
 
@@ -5140,7 +5213,6 @@ drm_output_init_egl(struct drm_output *output, struct drm_backend *b)
 			return -1;
 		}
 		memset(output->dumb[0]->map, 0, output->dumb[0]->size);
-
 		if (gl_renderer->output_stream_create(&output->base, ~0u,
 						      output->crtc_id) < 0) {
 			weston_log("failed to create gl renderer output stream "
@@ -5960,8 +6032,12 @@ drm_output_set_gbm_format(struct weston_output *base,
 	/* Without universal planes, we can't discover which formats are
 	 * supported by the primary plane; we just hope that the GBM format
 	 * works. */
-	if (!b->universal_planes)
-		output->scanout_plane->formats[0].format = output->gbm_format;
+	if (!b->universal_planes) {
+		if (output->scanout_plane)
+			output->scanout_plane->formats[0].format = output->gbm_format;
+		else
+			weston_log("set_gbm_format called before scanout_plane set\n");
+	}
 }
 
 static void
@@ -7608,8 +7684,20 @@ drm_backend_create(struct weston_compositor *compositor,
 	else
 		drm_device = find_primary_gpu(b, seat_id);
 	if (drm_device == NULL) {
-		weston_log("no drm device found\n");
-		goto err_udev;
+		int fd = drmOpen("drm-nvdc", "");
+		char *name;
+		if (fd >= 0) {
+			name = drmGetDeviceNameFromFd(fd);
+			b->drm.fd = fd;
+			b->drm.id = -1;
+			if (name) {
+				b->drm.filename = strdup(name);
+				drmFree(name);
+			}
+		} else {
+			weston_log("no drm device found\n");
+			goto err_udev;
+		}
 	}
 
 	if (init_kms_caps(b) < 0) {
@@ -7679,7 +7767,8 @@ drm_backend_create(struct weston_compositor *compositor,
 		goto err_udev_monitor;
 	}
 
-	udev_device_unref(drm_device);
+	if (drm_device)
+		udev_device_unref(drm_device);
 
 	weston_compositor_add_debug_binding(compositor, KEY_O,
 					    planes_binding, b);
diff --git a/shared/weston-egl-ext.h b/shared/weston-egl-ext.h
index e4e10ef9..4676a782 100644
--- a/shared/weston-egl-ext.h
+++ b/shared/weston-egl-ext.h
@@ -208,10 +208,6 @@ typedef EGLint (EGLAPIENTRYP PFNEGLDUPNATIVEFENCEFDANDROIDPROC) (EGLDisplay dpy,
 #define EGL_PLATFORM_DEVICE_EXT 0x313F
 #endif
 
-#ifndef EGL_DRM_MASTER_FD_EXT
-#define EGL_DRM_MASTER_FD_EXT 0x333C
-#endif
-
 /*
  * FIXME: Remove both EGL_EXT_stream_acquire_mode and
  *        EGL_NV_output_drm_flip_event definitions below once both extensions
@@ -262,7 +258,6 @@ EGLAPI EGLBoolean EGLAPIENTRY eglStreamConsumerAcquireAttribEXT (EGLDisplay dpy,
 
 /* EGL_DRM_MASTER_FD_EXT and EGL_NONE enum values are also kept to allow
  * compositor-drm.c to build with EGLDevice and EGLStream support */
-#define EGL_DRM_MASTER_FD_EXT    0x333C
 #define EGL_NONE                 0x3038
 
 #endif /* ENABLE_EGL */
-- 
2.20.1

